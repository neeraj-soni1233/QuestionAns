{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/neha/Desktop/RaviNice/QA/QuestionAns/screens/QuestionPage.js\";\nimport { StatusBar } from 'expo-status-bar';\nimport React from 'react';\nimport { useEffect } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { Button, TextInput } from 'react-native-paper';\nimport Constants from 'expo-constants';\nvar AnswerData1 = [{\n  id: 'bd7acbea-c1b1-46c2-aed5-3ad53abb28ba',\n  title: 'Answer 1'\n}, {\n  id: '3ac68afc-c605-48d3-a4f8-fbd91aa97f63',\n  title: 'Answer 2'\n}, {\n  id: '58694a0f-3da1-471f-bd96-145571e29d72',\n  title: 'Answer 3'\n}];\n\nfunction Item(_ref) {\n  var id = _ref.id,\n      title = _ref.title,\n      selected = _ref.selected,\n      onSelect = _ref.onSelect;\n  return React.createElement(TouchableOpacity, {\n    onPress: function onPress() {\n      return onSelect(id);\n    },\n    style: [styles.item, {\n      backgroundColor: selected ? '#008000' : '#99CCFF'\n    }],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }\n  }, title));\n}\n\nexport default function QuestionPage(props) {\n  var _React$useState = React.useState('Quiz'),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      text = _React$useState2[0],\n      setText = _React$useState2[1];\n\n  var _React$useState3 = React.useState('Neeraj'),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      userName = _React$useState4[0],\n      setUserName = _React$useState4[1];\n\n  var _React$useState5 = React.useState(' Q1: Hi What React native'),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      question = _React$useState6[0],\n      setQuestion = _React$useState6[1];\n\n  var _React$useState7 = React.useState(new Map()),\n      _React$useState8 = _slicedToArray(_React$useState7, 2),\n      selected = _React$useState8[0],\n      setSelected = _React$useState8[1];\n\n  var _React$useState9 = React.useState([]),\n      _React$useState10 = _slicedToArray(_React$useState9, 2),\n      answerData = _React$useState10[0],\n      setAnswerData = _React$useState10[1];\n\n  useEffect(function () {\n    console.log(\"This only happens ONCE.  But it happens AFTER the initial render.\");\n    setAnswerData(AnswerData1);\n  }, []);\n  var onSelect = React.useCallback(function (id) {\n    var newSelected = new Map(selected);\n    newSelected.set(id, !selected.get(id));\n    setSelected(newSelected);\n  }, []);\n  return React.createElement(View, {\n    style: styles.container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  }, React.createElement(View, {\n    style: styles.Label,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }\n  }, React.createElement(TextInput, {\n    width: 100,\n    disabled: true,\n    label: text,\n    mode: \"outlined\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 17\n    }\n  }), React.createElement(TextInput, {\n    width: 100,\n    disabled: true,\n    label: userName,\n    mode: \"outlined\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 17\n    }\n  })), React.createElement(View, {\n    style: styles.QuestionText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }\n  }, React.createElement(TextInput, {\n    disabled: true,\n    mode: \"flat\",\n    value: question,\n    multiline: true,\n    onChangeText: function onChangeText(question) {\n      return setQuestion(question);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 17\n    }\n  })), React.createElement(SafeAreaView, {\n    style: styles.container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }\n  }, React.createElement(FlatList, {\n    data: anser,\n    renderItem: function renderItem(_ref2) {\n      var item = _ref2.item;\n      return React.createElement(Item, {\n        id: item.id,\n        title: item.title,\n        selected: !!selected.get(item.id),\n        onSelect: onSelect,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 25\n        }\n      });\n    },\n    keyExtractor: function keyExtractor(item) {\n      return item.id;\n    },\n    extraData: selected,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 17\n    }\n  })), React.createElement(View, {\n    style: styles.button,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }\n  }, React.createElement(Button, {\n    color: \"#008000\",\n    width: 150,\n    mode: \"contained\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 17\n    }\n  }, \"Back\"), React.createElement(Button, {\n    color: \"#008000\",\n    width: 150,\n    mode: \"contained\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 17\n    }\n  }, \"Next\")));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff'\n  },\n  topLabel1: {\n    flexDirection: \"row\",\n    paddingLeft: 30,\n    paddingTop: 50,\n    borderColor: '#008000',\n    borderBottomWidth: 1\n  },\n  topLabel: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    padding: 20\n  },\n  Label: {\n    flexDirection: 'row',\n    backgroundColor: '#fff',\n    padding: 20,\n    justifyContent: 'space-between'\n  },\n  QuestionText: {\n    backgroundColor: '#fff',\n    padding: 20\n  },\n  listContainer: {\n    flex: 1,\n    marginTop: Constants.statusBarHeight\n  },\n  item: {\n    backgroundColor: '#99CCFF',\n    padding: 15,\n    marginVertical: 8,\n    marginHorizontal: 16\n  },\n  title: {\n    fontSize: 32\n  },\n  button: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    padding: 20\n  }\n});","map":{"version":3,"sources":["/Users/neha/Desktop/RaviNice/QA/QuestionAns/screens/QuestionPage.js"],"names":["StatusBar","React","useEffect","Button","TextInput","Constants","AnswerData1","id","title","Item","selected","onSelect","styles","item","backgroundColor","QuestionPage","props","useState","text","setText","userName","setUserName","question","setQuestion","Map","setSelected","answerData","setAnswerData","console","log","useCallback","newSelected","set","get","container","Label","QuestionText","anser","button","StyleSheet","create","flex","topLabel1","flexDirection","paddingLeft","paddingTop","borderColor","borderBottomWidth","topLabel","justifyContent","padding","listContainer","marginTop","statusBarHeight","marginVertical","marginHorizontal","fontSize"],"mappings":"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","sourcesContent":["import { StatusBar } from 'expo-status-bar';\nimport React from 'react';\nimport {useEffect} from 'react';\nimport { StyleSheet, Text, View, FlatList, SafeAreaView, TouchableOpacity, Alert } from 'react-native';\nimport { Button, TextInput } from 'react-native-paper';\nimport Constants from 'expo-constants';\n\nconst AnswerData1 = [\n    {\n        id: 'bd7acbea-c1b1-46c2-aed5-3ad53abb28ba',\n        title: 'Answer 1',\n    },\n    {\n        id: '3ac68afc-c605-48d3-a4f8-fbd91aa97f63',\n        title: 'Answer 2',\n    },\n    {\n        id: '58694a0f-3da1-471f-bd96-145571e29d72',\n        title: 'Answer 3',\n    }\n];\nfunction Item({ id, title, selected, onSelect }) {\n    return (\n        <TouchableOpacity\n            onPress={() => onSelect(id)}\n            style={[\n                styles.item,\n                { backgroundColor: selected ? '#008000' : '#99CCFF' },\n            ]}\n        >\n            <Text>{title}</Text>\n\n        </TouchableOpacity>\n    );\n}\n\nexport default function QuestionPage(props) {\n\n    \n\n    const [text, setText] = React.useState('Quiz');\n    const [userName, setUserName] = React.useState('Neeraj');\n    const [question, setQuestion] = React.useState(' Q1: Hi What React native');\n    const [selected, setSelected] = React.useState(new Map());\n    const [answerData,setAnswerData] = React.useState([]);\n\n    useEffect(() => {\n        console.log(\n          \"This only happens ONCE.  But it happens AFTER the initial render.\"\n        );\n        setAnswerData(AnswerData1)\n\n      }, []);\n\n    const onSelect = React.useCallback(\n        id => {\n            const newSelected = new Map(selected);\n            newSelected.set(id, !selected.get(id));\n\n            setSelected(newSelected);\n        },\n       // [selected], // if we want multiple selected\n       []\n    );\n    return (\n        <View style={styles.container}>\n            <View style={styles.Label}>\n                <TextInput width={100} disabled={true}\n                    label={text} mode=\"outlined\"\n                />\n                <TextInput width={100} disabled={true}\n                    label={userName} mode=\"outlined\"\n                />\n\n            </View>\n\n            <View style={styles.QuestionText} >\n                <TextInput disabled={true}\n                    mode=\"flat\"\n                    value={question}\n                    multiline = {true}\n                    onChangeText={question => setQuestion(question)}\n                />\n            </View>\n\n            <SafeAreaView style={styles.container}>\n                <FlatList\n                    data={anser}\n                    renderItem={({ item }) => (\n                        <Item\n                            id={item.id}\n                            title={item.title}\n                            selected={!!selected.get(item.id)}\n                            onSelect={onSelect}\n                        />\n                    )}\n                    keyExtractor={item => item.id}\n                    extraData={selected}\n                />\n            </SafeAreaView>\n\n            <View style={styles.button}>\n                <Button color = \"#008000\" width={150} mode= 'contained'  >\n                    Back\n                 </Button>\n\n                <Button color = \"#008000\"  width={150} mode='contained' >\n                    Next\n                 </Button>\n            </View>\n\n\n        </View>\n\n    );\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        backgroundColor: '#fff',\n\n    },\n    topLabel1: {\n        flexDirection: \"row\",\n        paddingLeft: 30,\n        paddingTop: 50,\n        borderColor: '#008000',\n        borderBottomWidth: 1,\n    },\n    topLabel: {\n        flexDirection: 'row',\n        justifyContent: 'space-between',\n        padding: 20,\n\n    },\n    Label: {\n        flexDirection: 'row',\n        backgroundColor: '#fff',\n        padding: 20,\n        justifyContent: 'space-between',\n    },\n    QuestionText: {\n        backgroundColor: '#fff',\n        padding: 20,\n\n    },\n\n    listContainer: {\n        flex: 1,\n        marginTop: Constants.statusBarHeight,\n\n    },\n    item: {\n        backgroundColor: '#99CCFF',\n        padding: 15,\n        marginVertical: 8,\n        marginHorizontal: 16,\n    },\n    title: {\n        fontSize: 32,\n    },\n    button: {\n        flexDirection:'row',\n        justifyContent: 'space-between',\n        padding:20,\n         \n     },\n\n\n});\n\n\n"]},"metadata":{},"sourceType":"module"}